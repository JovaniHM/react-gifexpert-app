{"version":3,"sources":["components/AddCategory.js","components/GidGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","categories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","some","cat","console","log","cats","type","value","onChange","target","toUpperCase","GidGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","then","resp","json","data","gifs","map","datum","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","useFetchGif","img","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2LAGaA,EAAc,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAAoB,EACtBC,mBAAU,IADY,mBACnDC,EADmD,KACvCC,EADuC,KAoB1D,OACI,sBAAMC,SAhBW,SAAEC,GAGnB,GAFAA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,EAAI,CAChC,GAAKT,EAAWU,MAAM,SAAAC,GAAG,OAAIA,IAAQR,EAAWK,UAE5C,YADAI,QAAQC,IAAK,iBAIjBZ,GAAe,SAAAa,GAAI,OAAMX,GAAN,mBAAqBW,OACxCV,EAAe,MAMnB,SACI,uBACIW,KAAK,OACLC,MAAQb,EACRc,SAtBQ,SAAEX,GAAF,OAASF,EAAeE,EAAEY,OAAOF,MAAMG,qB,QCJlDC,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACjC,OACI,sBAAKC,UAAU,gDAAf,UACI,iCACI,qBAAKC,IAAMF,EAAMG,IAAMJ,MAE3B,4BAAKA,Q,uBCRJK,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAWF,GAD/C,+DAGIG,MAAOR,GAAMS,MAAM,SAAAC,GAAI,OAAIA,EAAKC,UAHpC,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAU,IAAD,EAC5B,MAAO,CACHC,GAAID,EAAMC,GACVjB,MAAOgB,EAAMhB,MACbC,IAAG,UAAEe,EAAME,cAAR,aAAE,EAAcC,iBAAiBlB,QATzB,kBAaZa,GAbY,2CAAH,sDCOPM,EAAU,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAAe,ECJd,SAAEA,GAAe,IAAD,EACbzB,mBAAS,CAC/BgC,KAAM,GACNQ,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAgBvC,OAVAC,qBAAU,WACNnB,EAASC,GACRI,MAAM,SAAAQ,GACHK,EAAS,CACLV,KAAMK,EACNG,SAAS,SAGlB,CAAEf,IAEEgB,EDC2BG,CAAanB,GAAjCY,EAbuB,EAa7BL,KAAcQ,EAbe,EAafA,QAEtB,OACI,qCACI,oBAAInB,UAAU,0CAAd,SAA0DI,IAC1D,sBAAKJ,UAAU,YAAf,UAEQmB,GAAW,qBAAKnB,UAAU,8CAAf,yBAGQ,IAAlBgB,EAAO9B,QAAiBiC,EAIjBH,EAAOH,KAAI,SAAAW,GAAG,OACV,cAAC,EAAD,eAESA,GADCA,EAAIT,OAJlB,qBAAKf,UAAU,+CAAf,oCE5BfyB,EAAe,WAAM,MAeM9C,mBAAU,CAAE,kBAflB,mBAevBF,EAfuB,KAeXC,EAfW,KAsB9B,OACI,qCACI,8CAMA,cAAC,EAAD,CAAaD,WAAaA,EAAaC,cAAgBA,IACvD,uBACA,qBAAKsB,UAAU,WAAf,SAcQvB,EAAWoC,KAAK,SAAAT,GAGZ,OAAO,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,Y,MC9C9CsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1d41e4b9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ categories, setCategories }) => {\r\n    const [inputValue, setInputValue] = useState( '' );\r\n\r\n    const handleValue = ( e ) => setInputValue( e.target.value.toUpperCase() );\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 0 ) {\r\n            if ( categories.some( cat => cat === inputValue.trim() ) ) {\r\n                console.log( 'Key ya existe' );\r\n                return;\r\n            }\r\n\r\n            setCategories( cats => [ inputValue, ...cats ] );\r\n            setInputValue( '' );\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleValue }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    categories: PropTypes.array.isRequired,\r\n    setCategories: PropTypes.func.isRequired,\r\n}","import React from 'react'\r\n\r\nexport const GidGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounceInRight\">\r\n            <center>\r\n                <img src={ url } alt={ title } />\r\n            </center>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=eNUY6b75XDZqnNFlDQ6kzGO89VVhWwIu`;\r\n\r\n    const { data } = await fetch( url ).then( resp => resp.json() );\r\n\r\n    const gifs = data.map( datum => {\r\n        return {\r\n            id: datum.id,\r\n            title: datum.title,\r\n            url: datum.images?.downsized_medium.url,\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","// import React, { useState, useEffect } from 'react';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GidGridItem } from './GidGridItem';\r\n// import { getGifs } from '../helpers/getGifs'\r\nimport { useFetchGif } from '../hooks/useFetchGif';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    // const [images, setImages] = useState( [] );\r\n\r\n    // useEffect es un hook que nos permite ejecutar cierto codigo de manera condicional\r\n    // El segundo argumento que se manda al useEffect es una lista de dependencias, el cual son las condiciones para\r\n    // que el codigo se vuelva a ejecutar, al dejarla vacia indicamos que solo se ejecutara una vez que se renderice el \r\n    // componente\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //     .then( setImages )\r\n    // }, [ category ]);\r\n\r\n    // custom hook\r\n    const { data: images, loading } = useFetchGif( category );\r\n\r\n    return (\r\n        <>\r\n            <h4 className=\"animate__animated animate__bounceInDown\">{ category }</h4>\r\n            <div className=\"card-grid\">\r\n                {\r\n                    loading && <div className=\"msg animate__animated animate__bounceInDown\">Cargando...</div>\r\n                }\r\n                {\r\n                    (images.length === 0 && !loading)\r\n                        ? (\r\n                            <div className=\"msg animate__animated animate__bounceInRight\">No images found</div>\r\n                        ) : (\r\n                            images.map(img => (\r\n                                <GidGridItem\r\n                                    key={ img.id }\r\n                                    { ...img }\r\n                                />\r\n                            ))\r\n                        )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired,\r\n}","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGif = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs( category )\r\n        .then( images => {\r\n            setState({\r\n                data: images,\r\n                loading: false,\r\n            });\r\n        })\r\n    }, [ category ])\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    // ******************* Metodo 1 *******************\r\n    // Las variebles o consantes que creemos no son reactivas por lo que su modificacion no va a disparar ningun cambio\r\n    // en el DOM, por lo que cualquier cambio que se quiera hacer en el dom se usa el useState.\r\n    // El useState renderiza todo el componente cada vez que se cambia el valor con el que fue creado, en este caso al usar\r\n    // setCategories react volvera a ejecutar todo lo que hay en la funcion GifExpertApp\r\n    // const categories = ['One Punch Man', 'Samurai X', 'Dragon Ball'];\r\n\r\n    // const addCategory = () => {\r\n    //     console.log( categories );\r\n    //     categories.push('Los 7 Pecados Capitales');\r\n    //     console.log( categories );\r\n    // }\r\n\r\n    // ******************* Metodo 2 *******************\r\n    const [categories, setCategories] = useState( [ 'ONE PUNCH MAN' ] );\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories( [ ...categories, 'Los 7 Pecados Capitales' ] );\r\n    //     setCategories( cats => [ 'Los 7 Pecados Capitales', ...cats ] );\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            {/* ******************* Metodo 1 ******************* */}\r\n            {/* <button onClick={ addCategory }>Agregar</button> */}\r\n            {/* ******************* Metodo 2 ******************* */}\r\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n            {/* ******************* Uso de componente ******************* */}\r\n            <AddCategory categories={ categories } setCategories={ setCategories } />\r\n            <hr/>\r\n            <div className=\"card-box\">\r\n                {\r\n                    // ******************* Metodo 1 *******************\r\n                    // Los ciclos for no son expresiones de js por lo que no podemos usar el for dentro de las llaves\r\n                    // for (let i = 0; i < categories.length; i++) {\r\n                    //     categories[i];\r\n                    // }\r\n\r\n                    // La contante no es reactiva por lo que el agregar un elemento al arreglo no se vera en el HTML\r\n                    // categories.map( category => {\r\n                    //     return <li key={ category }>{ category }</li>;\r\n                    // })\r\n                    \r\n                    // ******************* Metodo 2 *******************\r\n                    categories.map( category => {\r\n                        // El atributo key es importante ya que react es la manera en que identifica si el componente cambio\r\n                        // si es uno nuevo o no tiene que hacer el renderizado\r\n                        return <GifGrid key={ category } category={ category } />\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}